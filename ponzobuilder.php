<?php
namespace Ponzoblocks;

/*
Plugin Name: Ponzoblocks
Plugin URI:  https://ponzotheme.nl/
Description: Create page blocks with gutenberg and ponzoblocks
Version:     0.0.1
Author:      Buro Ponzo
Author URI:  https://www.buroponzo.nl
Text Domain: ponzoblocks
 */

defined('ABSPATH') or die('Really?');

class PonzoBlocks
{

    private $file;
    private $path;
    private $url;
    private $assets;
    private $themedir;
    private $themeurl;

    /*
     *  init variables within construct
     */

    public function __construct()
    {
        $url = plugin_dir_url(__FILE__);
        // urls
        $this->file = __FILE__;
        $this->path = plugin_dir_path(__FILE__);
        $this->url = $url;
        $this->assets = $url . '/assets';
        $this->themedir = get_template_directory();
        $this->themeurl = get_template_directory_uri();
        $this->version = '0.0.2';
        $this->fieldsversion = 'v1';
    }

    /*
     *
     *  This function will get the assets from the app folder, generated by webpack
     *
     *  @type    action (init)
     *  @date    8/05/19
     *  @since    0.0.1
     *
     *  @param    asset string, and dev or dist folder
     *  @return    $file or DIE
     */
    public function themeAssets($asset, $folder)
    {
        // Look for the manifest file.
        $manifest = ("$this->themedir/$folder/manifest.json");

        if (file_exists($manifest)) {
            $manifest = file_get_contents($manifest);
            $json = json_decode($manifest, true);
            $file = $json[$asset];
            $file = $this->themeurl . "/$folder/$file";
            return $file;
        } else {
            wp_die(__('Draai webpack voor de eerste keer om de manifest file te genereren', THEMENAME));
        }
    }
    /*
     *
     *  This function will enque all scripts or styles when the user is admin
     *
     *  @type    action (init)
     *  @date    8/05/19
     *  @since    0.0.1
     *
     *  @param    N/A
     *  @return    N/A
     */
    public function getAssets()
    {

        $connection = @fsockopen('localhost', '9000');
        if ($connection) {
            //from theme functions
            if (function_exists('dev_css')) {
                dev_css();
            }
            //loads gutenberg css
            wp_enqueue_style('pb-gutenberg', 'http://localhost:9000/gutenberg.css', array(), false);

        } else {
            //from assets
            wp_enqueue_script(
                'pb-vendor',
                $this->themeAssets('vendor.js', 'dist')
            );
            wp_enqueue_script(
                'pb-js',
                $this->themeAssets('bundle.js', 'dist')
            );
            wp_enqueue_style(
                'pb-gutenberg-admin',
                $this->themeAssets('gutenberg.css', 'dist')
            );
        }
        wp_enqueue_script(
            'pb-gutenberg',
            $this->assets . '/js/pb-gutenberg.js',
            array(),
            $this->version
        );
        wp_enqueue_style(
            'pb-gutenberg-fonts',
            $this->assets . '/fonts/font.css',
            array(),
            $this->version
        );
    }

    /*
     *
     *  This function will register all current blocks to the gutenberg editor
     *
     *  @type    filter (init)
     *  @date    8/05/19
     *  @since    0.0.1
     *
     *  @param    $this
     *  @return    array with blocks
     */

    //set blocks
    public function ponzoblocks($allowed_blocks)
    {
        return array(
            'acf/contentcolumns',
            //'acf/priceblocks',
            //'acf/tiles',
            //'acf/banner',
            'acf/textvisual',
            'acf/longread',
            'acf/gallery',
            //'acf/visualgallery',
            //'acf/listitems',
            'acf/quote',
            'acf/shortcode',
            'acf/specialfeatures',
            'acf/custom',
             //'acf/testimonials',
            'core/block',
            //'core/template',
        );
    }
    //check if the file exists , or returns an error
    public function requireFile($file)
    {
        if (!file_exists($file)) {
            trigger_error(sprintf(__('Error locating %s for inclusion'), $file), E_USER_ERROR);
        } else {
            require_once $file;
        }
    }

    public function init()
    {
        //gets all acf fields for the pb-gutenberg editor
        if (ENV === 'production'):
            // $this->requireFile($this->path . "/lib/pb-production-" . $this->fieldsversion . ".php");
        endif;
        //load pb-gutenberg assets if is admin
        if (is_admin()) {
            add_action('enqueue_block_assets', array($this, 'getAssets'));
            //resets gutenberg editor options
            $this->requireFile($this->path . "/lib/pb-gutenreset.php");
            // loads the module themes for blocks into each design option
            $this->requireFile($this->path . "lib/pb-modulethemes.php");
        }
        //allowed blocktypes
        add_filter('allowed_block_types', array($this, 'ponzoblocks'));
        //
        //register blocks-options
        if (function_exists('acf_add_options_page')) {
            acf_add_options_page(array(
                'page_title' => 'Module themes',
                'menu_title' => 'Module themes',
                'menu_slug' => 'theme-blocks-settings',
                'capability' => 'edit_posts',
            ));
        }
        //helper for theme functions
        $this->requireFile($this->path . "/lib/pb-themehelpers.php");
        //now load the ponzoblocks gutenberg blocks
        $this->requireFile($this->path . "/lib/pb-gutenberg.php");
    }
}

$blocks = new PonzoBlocks();
$blocks->init();
